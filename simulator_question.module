<?php

/**
 * Implements hook_quiz_question_info().
 */
function simulator_question_quiz_question_info() {
  return array(
    'simulator_question' => array(
      'name' => t('Simulator question'),
      'description' => t('Quiz questions that allow configurable scoring of a student activity completed outside of the LMS.'),
      'question provider' => 'SimulatorQuestion',
      'response provider' => 'SimulatorResponse',
      'module' => 'quiz_question', // All wrapper functions are in that module.
    ),
  );
}

/**
 * Implements hook_config().
 */
function simulator_question_config() {
  $form['simulator_question_default_max_score'] = array(
    '#type' => 'textfield',
    '#title' => t('Default max score'),
    '#description' => t('Choose the default maximum score for a simulator question.'),
    '#default_value' => variable_get('simulator_question_default_max_score', 10),
  );
  $form['#validate'][] = 'simulator_question_config_validate';
  return $form;
}

/**
 * Validate the simulator_question config form values
 */
function simulator_question_config_validate($form, $form_state) {
  if ($form_state['values']['simulator_question_default_max_score'] <= 0) {
    form_set_error('simulator_question_default_max_score', t('The default max score must be greater than 0'));
  }
}

function simulator_question_node_submit($node, $form, &$form_state) {
  $node->device = $form_state['storage']['device'];
  $node->title = $node->device->name;
}

/**
 * Implements hook_theme().
 */
function simulator_question_theme() {
  return array(
    'simulator_question_view_unscored' => array(
      'variables' => array('unscored' => array()),
      'path' => drupal_get_path('module', 'simulator_question') . '/theme',
      'file' => 'simulator_question.theme.inc',
    ),
    'simulator_question_response_form' => array(
      'render element' => 'form',
      'path' => drupal_get_path('module', 'simulator_question') . '/theme',
      'file' => 'simulator_question.theme.inc',
    ),
    'simulator_question_answering_form' => array(
      'render element' => 'form',
      'path' => drupal_get_path('module', 'simulator_question') . '/theme',
      'template' => 'simulator question-answering-form',
    ),
  );
}

/**
 * Set a score for a simulator question.
 *
 * This stores a score for a simulator question and marks that question as having been evaluated.
 * The function updates all of the necessary data sources so that the individual answer results should be
 * reflected in the total scoring table.
 *
 * @param $quiz
 *  Quiz node.
 * @param $nid
 *  Node ID of question.
 * @param $vid
 *  Version ID of question.
 * @param $rid
 *  Result ID for the quiz results.
 * @param $score
 *  The numeric score to assign the result.
 * @param $update_total
 *  Shall the total score be updated?
 *
 * @return int
 *  Number of scores adjusted. If a change was made, this should be 1.
 */
function simulator_question_score_an_answer($values, $update_total = TRUE) {
  extract($values);

watchdog('warning', print_r($values, 1));
  $changed = db_update('quiz_simulator_question_user_answers')
    ->fields(array(
      'score' => $score,
      'is_evaluated' => 1,
    ))
    ->condition('question_nid', $nid)
    ->condition('question_vid', $vid)
    ->condition('result_id', $rid)
    ->execute();
  $max = db_query('SELECT max_score FROM {quiz_question_properties} WHERE vid = :vid', array(':vid' => $vid))->fetchField();
  db_update('quiz_node_results_answers')
    ->fields(array(
      'points_awarded' => $score,
      'is_correct' => $is_correct,
    ))
    ->condition('question_vid', $vid)
    ->condition('result_id', $rid)
    ->execute();
  quiz_update_total_score($quiz, $rid);

  watchdog('warning', print_r(get_defined_vars(),1));
  return $changed;
}

/**
 * Get the answer for a question.
 *
 * This stores a score for a simulator question and marks that question as having been evaluated.
 * @param $nid
 *  Node ID of question.
 * @param $vid
 *  Version ID of question.
 * @param $rid
 *  Result ID for the quiz results.
 *
 * @return Assoc array
 *  An array if successful, or FALSE if no result could be found. The array contains the following properties:
 *  <code>
 *  answer_id; // The answer ID
 *  answer; // The full text of the answer
 *  is_evaluated; // 0 if the question has not been evaluated, 1 if it has
 *  score; // The score the evaluator gave the user; this should be 0 if is_evaluated is 0.
 *  question_vid
 *  question_nid
 *  result_id
 *  </code>
 */
function simulator_question_get_answer($question_nid, $question_vid, $result_id) {
  $result = db_query('SELECT answer_id, answer, la.is_evaluated, la.score, question_vid, question_nid, la.result_id, la.answer_feedback, la.answer_feedback_format, rel.max_score AS rel_max_score FROM {quiz_simulator_question_user_answers} la
    JOIN {quiz_node_results} qnr ON (la.result_id = qnr.result_id)
    JOIN {quiz_node_relationship} rel ON (qnr.vid = rel.parent_vid AND rel.child_vid = la.question_vid)
    WHERE question_nid = :qnid AND question_vid = :qvid AND la.result_id = :rid', array(':qnid' => $question_nid, ':qvid' => $question_vid, ':rid' => $result_id))->fetchAssoc();
  return $result ? $result : FALSE;
}

/**
 * Given a quiz, return a list of all the unscored answers.
 *
 * @param $nid
 *  Node ID for the quiz to check.
 * @param $vid
 *  Version ID for the quiz to check.
 * @param $count
 *  Number of items to return (default: 50).
 * @param $offset
 *  Where in the results we should start (default: 0).
 *
 * @return
 *  Indexed array of result IDs that need to be scored.
 */
function simulator_question_get_unscored_answers_by_question($nid, $vid, $count = 50, $offset = 0) {
  $results = db_query('SELECT result_id FROM {quiz_simulator_question_user_answers}
    WHERE is_evaluated = :is_evaluated AND question_nid = :question_nid AND question_vid = :question_vid', array(':is_evaluated' => 0, ':question_nid' => $nid, ':question_vid' => $vid));

  $unscored = array();
  foreach ($results as $result) {
    $unscored[] = $result->result_id;
  }
  return $unscored;
}


/**
 * Get all quiz scores that have not yet been evaluated.
 *
 * @param $count
 *  Number of items to return (default: 50).
 * @param $offset
 *  Where in the results we should start (default: 0).
 *
 * @return
 *  Array of objects describing unanswered questions. Each object will have result_id, question_nid, and question_vid.
 */
function simulator_question_get_all_unscored_answers($count = 50, $offset = 0) {
  // $unscored = SimulatorResponse::fetchAllUnscoredAnswers();
  return $unscored;
}

/**
 * Generate a list of simulator questions
 *
 * @return
 *  array containing nid as key and title as value
 */
function simulator_question_questions_list() {
  $questions = array();
  $results = db_query('SELECT nid, title FROM {node} WHERE type = :type', array(':type' => 'simulator_question'));
  foreach ($results as $result) {
    $questions[$result->nid] = check_plain($result->title);
  }
  return $questions;
}

/**
 * Submit function for the report form
 *
 * @param $values
 *   The FAPI $form_state['values']
 */
function simulator_question_report_submit($values) {
}

/**
 * Validation function for the report form
 *
 * @param $values
 *  The FAPI $form_state['values']
 * @param $form_key
 *  Array key to add errors to
 */
function simulator_question_report_validate($values, $form_key) {
  $max = (int) $values['max_score'];
  // Check to make sure that entered score is not higher than max allowed score.
  if (!_quiz_is_int($values['score'], 0, $max)) {
    form_set_error($form_key . '][score', t('The score needs to be a number between @min and @max', array('@min' => 0, '@max' => $max)));
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function simulator_question_field_extra_fields() {
  $extra['node']['simulator_question'] = array(
    'form' => array(
      /*
      'device_metrics' => array(
        'label' => t('Metric'),
        'description' => t('Specify the criteria for grading the response'),
        'weight' => -4,
      ),
      */
      'config' => array(
        'label' => t('Threshold'),
        'description' => t('Specify the threshold value used for evaluation within the simulator.'),
      ),
      'device' => array(
        'label' => t('Device'),
      ),
      'required' => array(
        'label' => t('Required to pass'),
        'description' => t('Failure to pass this question will fail the lesson.'),
      )
    ),
  );
  return $extra;
}

/**
 * Options callback for metric select list.
 *
 * @TODO: Right now this is hardcoded. We have the option of replacing this
 * behavior with loading details from other sources in the future.
 *
 * @return array
 */
function simulator_question_metric_options() {
  $options = array(
    /*
    'teeth' => t('Teeth - measured in newtons'),
    'tongue' => t('Tongue - measured in newtons'),
    'back_of_throat' => t('Back of the Throat - measured in newtons'),
    'epiglottis' => t('Epiglottis - measured in newtons'),
    'vocal_chords_pass' => t('Vocal Chords - Passed through'),
    'secured_airway' => t('Secured Airway - True/false'),
    'tube_depth_teeth' => t('Tube depth to teeth'),
    'head_position' => t('Head position'),
    'palpation' => t('Palpation - measured in newtons'),
    'incision_length' => t('Incision - length'),
    'incision_through' => t('Incision - through'),
    'elapsed_time' => t('Elapsed time - in seconds'),
    */
    'throat' => t('Throat'),
    'trachea' => t('Trachea'),
    'esophagus' => t('Esophagus'),
    'vocal_chords' => t('Vocal chords'),
    'time_limit' => t('Time limit for task'),
  );

  // Allow other modules to alter available options.
  drupal_alter('simulator_metric_options', $options);

  return $options;
}

/**
 * Load device information from YAML, return PHP
 * Metric form
 * Configuration form
 */

function simulator_question_load_device(&$device) {
  // Call function to retrieve YAML file for device
  // $device->info = xlms_device_info_load($device);

  if (!isset($device->info)) {
    //$device->storage->yaml = __DIR__ . '/' . $device->name . '.yaml';
    $configuration_file = file_load($device->configuration_file);
    // Parse YAML
    $device->info = json_decode(json_encode(yaml_parse_file(drupal_realpath($configuration_file->uri))));
  }
dpm($device); dpm($configuration_file);

}

function simulator_question_metrics_form_callback(&$form, &$form_state) {
  return $form['device_metrics'];
}

function simulator_question_form_simulator_question_node_form_alter(&$form, &$form_state) {
  $form['#tree'] = TRUE;
  $form['title']['#type'] = 'hidden';
  $form['body']['#type'] = 'hidden';
  $form['body']['#value'] = "empty";
}